{"ast":null,"code":"// \"use client\"\n\n// import { useState, useEffect } from \"react\"\n// import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n\n//   const loadPayments = async () => {\n//     try {\n//       setLoading(true)\n//       const response = await fetch(\"http://localhost:8080/api/payments\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n\n//       const data = await response.json()\n//       setPayments(data)\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error loading payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     loadPayments()\n//   }, [])\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Format date\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return new Intl.DateTimeFormat(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     }).format(date)\n//   }\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//           <button onClick={loadPayments} className=\"refresh-button\">\n//             Làm mới\n//           </button>\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {filteredPayments.length === 0 ? (\n//               <div className=\"empty-state\">\n//                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n//               </div>\n//             ) : (\n//               <div className=\"overflow-x-auto w-full\">\n//                 <table className=\"orders-table\">\n//                   <thead>\n//                     <tr>\n//                       <th>Mã thanh toán</th>\n//                       <th>Mã đơn hàng</th>\n//                       <th>Bàn</th>\n//                       <th>Tổng tiền</th>\n//                       <th>Ngày thanh toán</th>\n//                       <th>Trạng thái</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody>\n//                     {filteredPayments.map((payment) => (\n//                       <tr key={payment.PaymentID}>\n//                         <td>{payment.PaymentID}</td>\n//                         <td>{payment.OrderID}</td>\n//                         <td>{payment.TableID}</td>\n//                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n//                         <td>{formatDate(payment.PaymentDate)}</td>\n//                         <td>\n//                           <span\n//                             className={`order-status ${\n//                               payment.Status === \"Completed\"\n//                                 ? \"status-completed\"\n//                                 : payment.Status === \"Pending\"\n//                                   ? \"status-pending\"\n//                                   : \"status-progress\"\n//                             }`}\n//                           >\n//                             {payment.Status === \"Completed\"\n//                               ? \"Hoàn thành\"\n//                               : payment.Status === \"Pending\"\n//                                 ? \"Chờ xử lý\"\n//                                 : \"Đang xử lý\"}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </DashboardSection>\n//     </div>\n//   )\n// }\n\n// export default PaymentSection","map":{"version":3,"names":[],"sources":["/home/dhpho/Programming/NCKH/admin-web/src/PaymentSection.js"],"sourcesContent":["// \"use client\"\n\n// import { useState, useEffect } from \"react\"\n// import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n\n//   const loadPayments = async () => {\n//     try {\n//       setLoading(true)\n//       const response = await fetch(\"http://localhost:8080/api/payments\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n\n//       const data = await response.json()\n//       setPayments(data)\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error loading payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     loadPayments()\n//   }, [])\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Format date\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return new Intl.DateTimeFormat(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     }).format(date)\n//   }\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//           <button onClick={loadPayments} className=\"refresh-button\">\n//             Làm mới\n//           </button>\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {filteredPayments.length === 0 ? (\n//               <div className=\"empty-state\">\n//                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n//               </div>\n//             ) : (\n//               <div className=\"overflow-x-auto w-full\">\n//                 <table className=\"orders-table\">\n//                   <thead>\n//                     <tr>\n//                       <th>Mã thanh toán</th>\n//                       <th>Mã đơn hàng</th>\n//                       <th>Bàn</th>\n//                       <th>Tổng tiền</th>\n//                       <th>Ngày thanh toán</th>\n//                       <th>Trạng thái</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody>\n//                     {filteredPayments.map((payment) => (\n//                       <tr key={payment.PaymentID}>\n//                         <td>{payment.PaymentID}</td>\n//                         <td>{payment.OrderID}</td>\n//                         <td>{payment.TableID}</td>\n//                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n//                         <td>{formatDate(payment.PaymentDate)}</td>\n//                         <td>\n//                           <span\n//                             className={`order-status ${\n//                               payment.Status === \"Completed\"\n//                                 ? \"status-completed\"\n//                                 : payment.Status === \"Pending\"\n//                                   ? \"status-pending\"\n//                                   : \"status-progress\"\n//                             }`}\n//                           >\n//                             {payment.Status === \"Completed\"\n//                               ? \"Hoàn thành\"\n//                               : payment.Status === \"Pending\"\n//                                 ? \"Chờ xử lý\"\n//                                 : \"Đang xử lý\"}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </DashboardSection>\n//     </div>\n//   )\n// }\n\n// export default PaymentSection\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}