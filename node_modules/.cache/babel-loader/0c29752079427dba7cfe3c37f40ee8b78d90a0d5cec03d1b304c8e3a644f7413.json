{"ast":null,"code":"// // \"use client\"\n\n// // import { useState, useEffect } from \"react\"\n// // import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// // import \"./Content.css\"\n// // import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// // const PaymentSection = () => {\n// //   const [payments, setPayments] = useState([])\n// //   const [loading, setLoading] = useState(true)\n// //   const [error, setError] = useState(null)\n// //   const [searchTerm, setSearchTerm] = useState(\"\")\n\n// //   const loadPayments = async () => {\n// //     try {\n// //       setLoading(true)\n// //       const response = await fetch(\"http://localhost:8080/api/payments\", {\n// //         method: \"GET\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //       })\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to fetch payments\")\n// //       }\n\n// //       const data = await response.json()\n// //       setPayments(data)\n// //       setError(null)\n// //     } catch (err) {\n// //       console.error(\"Error loading payments:\", err)\n// //       setError(\"Failed to load payments. Please try again later.\")\n// //     } finally {\n// //       setLoading(false)\n// //     }\n// //   }\n\n// //   useEffect(() => {\n// //     loadPayments()\n// //   }, [])\n\n// //   // Filter payments based on search term\n// //   const filteredPayments = payments.filter(\n// //     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n// //   )\n\n// //   // Format currency\n// //   const formatCurrency = (amount) => {\n// //     return new Intl.NumberFormat(\"vi-VN\", {\n// //       style: \"currency\",\n// //       currency: \"VND\",\n// //     }).format(amount)\n// //   }\n\n// //   // Format date\n// //   const formatDate = (dateString) => {\n// //     const date = new Date(dateString)\n// //     return new Intl.DateTimeFormat(\"vi-VN\", {\n// //       year: \"numeric\",\n// //       month: \"2-digit\",\n// //       day: \"2-digit\",\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //     }).format(date)\n// //   }\n\n// //   return (\n// //     <div className=\"space-y-6\">\n// //       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n// //         {error && (\n// //           <div className=\"error-alert\">\n// //             <AlertCircle className=\"h-5 w-5\" />\n// //             {error}\n// //           </div>\n// //         )}\n\n// //         <div className=\"order-search-container\">\n// //           <Search className=\"order-search-icon h-4 w-4\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n// //             className=\"order-search-input\"\n// //             value={searchTerm}\n// //             onChange={(e) => setSearchTerm(e.target.value)}\n// //           />\n// //           <button onClick={loadPayments} className=\"refresh-button\">\n// //             Làm mới\n// //           </button>\n// //         </div>\n\n// //         {loading ? (\n// //           <div className=\"loading-container\">\n// //             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n// //             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n// //           </div>\n// //         ) : (\n// //           <>\n// //             {filteredPayments.length === 0 ? (\n// //               <div className=\"empty-state\">\n// //                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"overflow-x-auto w-full\">\n// //                 <table className=\"orders-table\">\n// //                   <thead>\n// //                     <tr>\n// //                       <th>Mã thanh toán</th>\n// //                       <th>Mã đơn hàng</th>\n// //                       <th>Bàn</th>\n// //                       <th>Tổng tiền</th>\n// //                       <th>Ngày thanh toán</th>\n// //                       <th>Trạng thái</th>\n// //                     </tr>\n// //                   </thead>\n// //                   <tbody>\n// //                     {filteredPayments.map((payment) => (\n// //                       <tr key={payment.PaymentID}>\n// //                         <td>{payment.PaymentID}</td>\n// //                         <td>{payment.OrderID}</td>\n// //                         <td>{payment.TableID}</td>\n// //                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n// //                         <td>{formatDate(payment.PaymentDate)}</td>\n// //                         <td>\n// //                           <span\n// //                             className={`order-status ${\n// //                               payment.Status === \"Completed\"\n// //                                 ? \"status-completed\"\n// //                                 : payment.Status === \"Pending\"\n// //                                   ? \"status-pending\"\n// //                                   : \"status-progress\"\n// //                             }`}\n// //                           >\n// //                             {payment.Status === \"Completed\"\n// //                               ? \"Hoàn thành\"\n// //                               : payment.Status === \"Pending\"\n// //                                 ? \"Chờ xử lý\"\n// //                                 : \"Đang xử lý\"}\n// //                           </span>\n// //                         </td>\n// //                       </tr>\n// //                     ))}\n// //                   </tbody>\n// //                 </table>\n// //               </div>\n// //             )}\n// //           </>\n// //         )}\n// //       </DashboardSection>\n// //     </div>\n// //   )\n// // }\n\n// // export default PaymentSection\n\n// \"use client\"\n\n// import { useEffect, useState } from \"react\"\n// import { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n//   const [dialogOpen, setDialogOpen] = useState(false)\n//   const [selectedPayment, setSelectedPayment] = useState(null)\n//   const [pointsToUse, setPointsToUse] = useState(0)\n\n//   const fetchPayments = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/all\")\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n//       const data = await response.json()\n//       setPayments(data.payments || [])\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error fetching payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     fetchPayments()\n\n//     // Set up interval to fetch data every second\n//     const intervalId = setInterval(() => {\n//       fetchPayments()\n//     }, 1000)\n\n//     // Clean up interval on component unmount\n//     return () => clearInterval(intervalId)\n//   }, [])\n\n//   const handlePaymentClick = (payment) => {\n//     if (payment.UserID !== -1) {\n//       // Open dialog for registered user\n//       setSelectedPayment(payment)\n//       setPointsToUse(0)\n//       setDialogOpen(true)\n//     } else {\n//       // Handle guest payment directly\n//       handleGuestPayment(payment)\n//     }\n//   }\n\n//   const handleGuestPayment = async (payment) => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           orderId: payment.OrderID,\n//           amount: payment.TotalPrice,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Refresh payments after successful payment\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing guest payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   const handleUserPayment = async () => {\n//     if (!selectedPayment) return\n\n//     try {\n//       // Calculate new amount after points deduction\n//       const pointsValue = pointsToUse * 1000\n//       const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsValue)\n\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           userId: selectedPayment.UserID,\n//           orderId: selectedPayment.OrderID,\n//           usingPoints: pointsToUse > 0 ? 1 : 0,\n//           pointsUsedNumber: pointsToUse,\n//           amount: newAmount,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Close dialog and refresh payments\n//       setDialogOpen(false)\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing user payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   // Format date to a more readable format\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return date.toLocaleString(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     })\n//   }\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) =>\n//       payment.UserName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//       payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Separate paid and unpaid payments\n//   const unpaidPayments = filteredPayments.filter((payment) => payment.TotalPrice === 0)\n//   const paidPayments = filteredPayments.filter((payment) => payment.TotalPrice > 0)\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo tên hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {/* Unpaid Payments Section */}\n//             <div className=\"mb-8\">\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Chưa thanh toán</h3>\n//               {unpaidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng chưa thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Thao tác</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {unpaidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td>\n//                             <button onClick={() => handlePaymentClick(payment)} className=\"serve-button\">\n//                               <CheckCircle className=\"h-4 w-4 mr-1\" />\n//                               Thanh toán\n//                             </button>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Paid Payments Section */}\n//             <div>\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Đã thanh toán</h3>\n//               {paidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng đã thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Tổng tiền</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {paidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td className=\"font-medium text-green-600\">{formatCurrency(payment.TotalPrice)}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </DashboardSection>\n\n//       {/* Points Dialog */}\n//       {dialogOpen && selectedPayment && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Sử dụng điểm tích lũy</h3>\n\n//             <div className=\"mb-4\">\n//               <p className=\"text-sm text-gray-600 mb-1\">Khách hàng: {selectedPayment.UserName}</p>\n//               <p className=\"text-sm text-gray-600 mb-1\">Điểm hiện có: {selectedPayment.Points} điểm</p>\n//               <p className=\"text-sm text-gray-600 mb-3\">\n//                 Giá trị đơn hàng: {formatCurrency(selectedPayment.TotalPrice)}\n//               </p>\n\n//               <div className=\"mt-4\">\n//                 <label htmlFor=\"pointsInput\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                   Nhập số điểm muốn sử dụng:\n//                 </label>\n//                 <input\n//                   id=\"pointsInput\"\n//                   type=\"number\"\n//                   min=\"0\"\n//                   max={Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))}\n//                   value={pointsToUse}\n//                   onChange={(e) => setPointsToUse(Number.parseInt(e.target.value) || 0)}\n//                   className=\"form-input w-full\"\n//                 />\n//                 <p className=\"text-xs text-gray-500 mt-1\">\n//                   1 điểm = 1.000đ (Tối đa:{\" \"}\n//                   {Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))} điểm)\n//                 </p>\n//               </div>\n\n//               <div className=\"mt-4 p-3 bg-gray-50 rounded-md\">\n//                 <p className=\"text-sm font-medium\">Tổng thanh toán sau khi sử dụng điểm:</p>\n//                 <p className=\"text-lg font-bold text-green-600\">\n//                   {formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))}\n//                 </p>\n//               </div>\n//             </div>\n\n//             <div className=\"flex justify-end space-x-3 mt-6\">\n//               <button\n//                 onClick={() => setDialogOpen(false)}\n//                 className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n//               >\n//                 Hủy\n//               </button>\n//               <button\n//                 onClick={handleUserPayment}\n//                 className=\"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n//               >\n//                 Xác nhận thanh toán\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default PaymentSection","map":{"version":3,"names":[],"sources":["/home/dhpho/Programming/NCKH/admin-web/src/PaymentSection.js"],"sourcesContent":["// // \"use client\"\n\n// // import { useState, useEffect } from \"react\"\n// // import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// // import \"./Content.css\"\n// // import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// // const PaymentSection = () => {\n// //   const [payments, setPayments] = useState([])\n// //   const [loading, setLoading] = useState(true)\n// //   const [error, setError] = useState(null)\n// //   const [searchTerm, setSearchTerm] = useState(\"\")\n\n// //   const loadPayments = async () => {\n// //     try {\n// //       setLoading(true)\n// //       const response = await fetch(\"http://localhost:8080/api/payments\", {\n// //         method: \"GET\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //       })\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to fetch payments\")\n// //       }\n\n// //       const data = await response.json()\n// //       setPayments(data)\n// //       setError(null)\n// //     } catch (err) {\n// //       console.error(\"Error loading payments:\", err)\n// //       setError(\"Failed to load payments. Please try again later.\")\n// //     } finally {\n// //       setLoading(false)\n// //     }\n// //   }\n\n// //   useEffect(() => {\n// //     loadPayments()\n// //   }, [])\n\n// //   // Filter payments based on search term\n// //   const filteredPayments = payments.filter(\n// //     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n// //   )\n\n// //   // Format currency\n// //   const formatCurrency = (amount) => {\n// //     return new Intl.NumberFormat(\"vi-VN\", {\n// //       style: \"currency\",\n// //       currency: \"VND\",\n// //     }).format(amount)\n// //   }\n\n// //   // Format date\n// //   const formatDate = (dateString) => {\n// //     const date = new Date(dateString)\n// //     return new Intl.DateTimeFormat(\"vi-VN\", {\n// //       year: \"numeric\",\n// //       month: \"2-digit\",\n// //       day: \"2-digit\",\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //     }).format(date)\n// //   }\n\n// //   return (\n// //     <div className=\"space-y-6\">\n// //       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n// //         {error && (\n// //           <div className=\"error-alert\">\n// //             <AlertCircle className=\"h-5 w-5\" />\n// //             {error}\n// //           </div>\n// //         )}\n\n// //         <div className=\"order-search-container\">\n// //           <Search className=\"order-search-icon h-4 w-4\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n// //             className=\"order-search-input\"\n// //             value={searchTerm}\n// //             onChange={(e) => setSearchTerm(e.target.value)}\n// //           />\n// //           <button onClick={loadPayments} className=\"refresh-button\">\n// //             Làm mới\n// //           </button>\n// //         </div>\n\n// //         {loading ? (\n// //           <div className=\"loading-container\">\n// //             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n// //             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n// //           </div>\n// //         ) : (\n// //           <>\n// //             {filteredPayments.length === 0 ? (\n// //               <div className=\"empty-state\">\n// //                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"overflow-x-auto w-full\">\n// //                 <table className=\"orders-table\">\n// //                   <thead>\n// //                     <tr>\n// //                       <th>Mã thanh toán</th>\n// //                       <th>Mã đơn hàng</th>\n// //                       <th>Bàn</th>\n// //                       <th>Tổng tiền</th>\n// //                       <th>Ngày thanh toán</th>\n// //                       <th>Trạng thái</th>\n// //                     </tr>\n// //                   </thead>\n// //                   <tbody>\n// //                     {filteredPayments.map((payment) => (\n// //                       <tr key={payment.PaymentID}>\n// //                         <td>{payment.PaymentID}</td>\n// //                         <td>{payment.OrderID}</td>\n// //                         <td>{payment.TableID}</td>\n// //                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n// //                         <td>{formatDate(payment.PaymentDate)}</td>\n// //                         <td>\n// //                           <span\n// //                             className={`order-status ${\n// //                               payment.Status === \"Completed\"\n// //                                 ? \"status-completed\"\n// //                                 : payment.Status === \"Pending\"\n// //                                   ? \"status-pending\"\n// //                                   : \"status-progress\"\n// //                             }`}\n// //                           >\n// //                             {payment.Status === \"Completed\"\n// //                               ? \"Hoàn thành\"\n// //                               : payment.Status === \"Pending\"\n// //                                 ? \"Chờ xử lý\"\n// //                                 : \"Đang xử lý\"}\n// //                           </span>\n// //                         </td>\n// //                       </tr>\n// //                     ))}\n// //                   </tbody>\n// //                 </table>\n// //               </div>\n// //             )}\n// //           </>\n// //         )}\n// //       </DashboardSection>\n// //     </div>\n// //   )\n// // }\n\n// // export default PaymentSection\n\n\n// \"use client\"\n\n// import { useEffect, useState } from \"react\"\n// import { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n//   const [dialogOpen, setDialogOpen] = useState(false)\n//   const [selectedPayment, setSelectedPayment] = useState(null)\n//   const [pointsToUse, setPointsToUse] = useState(0)\n\n//   const fetchPayments = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/all\")\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n//       const data = await response.json()\n//       setPayments(data.payments || [])\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error fetching payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     fetchPayments()\n\n//     // Set up interval to fetch data every second\n//     const intervalId = setInterval(() => {\n//       fetchPayments()\n//     }, 1000)\n\n//     // Clean up interval on component unmount\n//     return () => clearInterval(intervalId)\n//   }, [])\n\n//   const handlePaymentClick = (payment) => {\n//     if (payment.UserID !== -1) {\n//       // Open dialog for registered user\n//       setSelectedPayment(payment)\n//       setPointsToUse(0)\n//       setDialogOpen(true)\n//     } else {\n//       // Handle guest payment directly\n//       handleGuestPayment(payment)\n//     }\n//   }\n\n//   const handleGuestPayment = async (payment) => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           orderId: payment.OrderID,\n//           amount: payment.TotalPrice,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Refresh payments after successful payment\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing guest payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   const handleUserPayment = async () => {\n//     if (!selectedPayment) return\n\n//     try {\n//       // Calculate new amount after points deduction\n//       const pointsValue = pointsToUse * 1000\n//       const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsValue)\n\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           userId: selectedPayment.UserID,\n//           orderId: selectedPayment.OrderID,\n//           usingPoints: pointsToUse > 0 ? 1 : 0,\n//           pointsUsedNumber: pointsToUse,\n//           amount: newAmount,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Close dialog and refresh payments\n//       setDialogOpen(false)\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing user payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   // Format date to a more readable format\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return date.toLocaleString(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     })\n//   }\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) =>\n//       payment.UserName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//       payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Separate paid and unpaid payments\n//   const unpaidPayments = filteredPayments.filter((payment) => payment.TotalPrice === 0)\n//   const paidPayments = filteredPayments.filter((payment) => payment.TotalPrice > 0)\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo tên hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {/* Unpaid Payments Section */}\n//             <div className=\"mb-8\">\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Chưa thanh toán</h3>\n//               {unpaidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng chưa thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Thao tác</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {unpaidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td>\n//                             <button onClick={() => handlePaymentClick(payment)} className=\"serve-button\">\n//                               <CheckCircle className=\"h-4 w-4 mr-1\" />\n//                               Thanh toán\n//                             </button>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Paid Payments Section */}\n//             <div>\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Đã thanh toán</h3>\n//               {paidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng đã thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Tổng tiền</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {paidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td className=\"font-medium text-green-600\">{formatCurrency(payment.TotalPrice)}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </DashboardSection>\n\n//       {/* Points Dialog */}\n//       {dialogOpen && selectedPayment && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Sử dụng điểm tích lũy</h3>\n\n//             <div className=\"mb-4\">\n//               <p className=\"text-sm text-gray-600 mb-1\">Khách hàng: {selectedPayment.UserName}</p>\n//               <p className=\"text-sm text-gray-600 mb-1\">Điểm hiện có: {selectedPayment.Points} điểm</p>\n//               <p className=\"text-sm text-gray-600 mb-3\">\n//                 Giá trị đơn hàng: {formatCurrency(selectedPayment.TotalPrice)}\n//               </p>\n\n//               <div className=\"mt-4\">\n//                 <label htmlFor=\"pointsInput\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                   Nhập số điểm muốn sử dụng:\n//                 </label>\n//                 <input\n//                   id=\"pointsInput\"\n//                   type=\"number\"\n//                   min=\"0\"\n//                   max={Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))}\n//                   value={pointsToUse}\n//                   onChange={(e) => setPointsToUse(Number.parseInt(e.target.value) || 0)}\n//                   className=\"form-input w-full\"\n//                 />\n//                 <p className=\"text-xs text-gray-500 mt-1\">\n//                   1 điểm = 1.000đ (Tối đa:{\" \"}\n//                   {Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))} điểm)\n//                 </p>\n//               </div>\n\n//               <div className=\"mt-4 p-3 bg-gray-50 rounded-md\">\n//                 <p className=\"text-sm font-medium\">Tổng thanh toán sau khi sử dụng điểm:</p>\n//                 <p className=\"text-lg font-bold text-green-600\">\n//                   {formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))}\n//                 </p>\n//               </div>\n//             </div>\n\n//             <div className=\"flex justify-end space-x-3 mt-6\">\n//               <button\n//                 onClick={() => setDialogOpen(false)}\n//                 className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n//               >\n//                 Hủy\n//               </button>\n//               <button\n//                 onClick={handleUserPayment}\n//                 className=\"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n//               >\n//                 Xác nhận thanh toán\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default PaymentSection\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}