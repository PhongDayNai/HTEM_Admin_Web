{"ast":null,"code":"// // \"use client\"\n\n// // import { useState, useEffect } from \"react\"\n// // import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// // import \"./Content.css\"\n// // import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// // const PaymentSection = () => {\n// //   const [payments, setPayments] = useState([])\n// //   const [loading, setLoading] = useState(true)\n// //   const [error, setError] = useState(null)\n// //   const [searchTerm, setSearchTerm] = useState(\"\")\n\n// //   const loadPayments = async () => {\n// //     try {\n// //       setLoading(true)\n// //       const response = await fetch(\"http://localhost:8080/api/payments\", {\n// //         method: \"GET\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //       })\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to fetch payments\")\n// //       }\n\n// //       const data = await response.json()\n// //       setPayments(data)\n// //       setError(null)\n// //     } catch (err) {\n// //       console.error(\"Error loading payments:\", err)\n// //       setError(\"Failed to load payments. Please try again later.\")\n// //     } finally {\n// //       setLoading(false)\n// //     }\n// //   }\n\n// //   useEffect(() => {\n// //     loadPayments()\n// //   }, [])\n\n// //   // Filter payments based on search term\n// //   const filteredPayments = payments.filter(\n// //     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n// //   )\n\n// //   // Format currency\n// //   const formatCurrency = (amount) => {\n// //     return new Intl.NumberFormat(\"vi-VN\", {\n// //       style: \"currency\",\n// //       currency: \"VND\",\n// //     }).format(amount)\n// //   }\n\n// //   // Format date\n// //   const formatDate = (dateString) => {\n// //     const date = new Date(dateString)\n// //     return new Intl.DateTimeFormat(\"vi-VN\", {\n// //       year: \"numeric\",\n// //       month: \"2-digit\",\n// //       day: \"2-digit\",\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //     }).format(date)\n// //   }\n\n// //   return (\n// //     <div className=\"space-y-6\">\n// //       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n// //         {error && (\n// //           <div className=\"error-alert\">\n// //             <AlertCircle className=\"h-5 w-5\" />\n// //             {error}\n// //           </div>\n// //         )}\n\n// //         <div className=\"order-search-container\">\n// //           <Search className=\"order-search-icon h-4 w-4\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n// //             className=\"order-search-input\"\n// //             value={searchTerm}\n// //             onChange={(e) => setSearchTerm(e.target.value)}\n// //           />\n// //           <button onClick={loadPayments} className=\"refresh-button\">\n// //             Làm mới\n// //           </button>\n// //         </div>\n\n// //         {loading ? (\n// //           <div className=\"loading-container\">\n// //             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n// //             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n// //           </div>\n// //         ) : (\n// //           <>\n// //             {filteredPayments.length === 0 ? (\n// //               <div className=\"empty-state\">\n// //                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"overflow-x-auto w-full\">\n// //                 <table className=\"orders-table\">\n// //                   <thead>\n// //                     <tr>\n// //                       <th>Mã thanh toán</th>\n// //                       <th>Mã đơn hàng</th>\n// //                       <th>Bàn</th>\n// //                       <th>Tổng tiền</th>\n// //                       <th>Ngày thanh toán</th>\n// //                       <th>Trạng thái</th>\n// //                     </tr>\n// //                   </thead>\n// //                   <tbody>\n// //                     {filteredPayments.map((payment) => (\n// //                       <tr key={payment.PaymentID}>\n// //                         <td>{payment.PaymentID}</td>\n// //                         <td>{payment.OrderID}</td>\n// //                         <td>{payment.TableID}</td>\n// //                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n// //                         <td>{formatDate(payment.PaymentDate)}</td>\n// //                         <td>\n// //                           <span\n// //                             className={`order-status ${\n// //                               payment.Status === \"Completed\"\n// //                                 ? \"status-completed\"\n// //                                 : payment.Status === \"Pending\"\n// //                                   ? \"status-pending\"\n// //                                   : \"status-progress\"\n// //                             }`}\n// //                           >\n// //                             {payment.Status === \"Completed\"\n// //                               ? \"Hoàn thành\"\n// //                               : payment.Status === \"Pending\"\n// //                                 ? \"Chờ xử lý\"\n// //                                 : \"Đang xử lý\"}\n// //                           </span>\n// //                         </td>\n// //                       </tr>\n// //                     ))}\n// //                   </tbody>\n// //                 </table>\n// //               </div>\n// //             )}\n// //           </>\n// //         )}\n// //       </DashboardSection>\n// //     </div>\n// //   )\n// // }\n\n// // export default PaymentSection\n\n// \"use client\"\n\n// import { useEffect, useState } from \"react\"\n// import { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n//   const [dialogOpen, setDialogOpen] = useState(false)\n//   const [selectedPayment, setSelectedPayment] = useState(null)\n//   const [pointsToUse, setPointsToUse] = useState(0)\n\n//   const fetchPayments = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/all\")\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n//       const data = await response.json()\n//       setPayments(data.payments || [])\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error fetching payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     fetchPayments()\n\n//     // Set up interval to fetch data every second\n//     const intervalId = setInterval(() => {\n//       fetchPayments()\n//     }, 1000)\n\n//     // Clean up interval on component unmount\n//     return () => clearInterval(intervalId)\n//   }, [])\n\n//   const handlePaymentClick = (payment) => {\n//     if (payment.UserID !== -1) {\n//       // Open dialog for registered user\n//       setSelectedPayment(payment)\n//       setPointsToUse(0)\n//       setDialogOpen(true)\n//     } else {\n//       // Handle guest payment directly\n//       handleGuestPayment(payment)\n//     }\n//   }\n\n//   const handleGuestPayment = async (payment) => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           orderId: payment.OrderID,\n//           amount: payment.TotalPrice,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Refresh payments after successful payment\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing guest payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   const handleUserPayment = async () => {\n//     if (!selectedPayment) return\n\n//     try {\n//       // Calculate new amount after points deduction\n//       const pointsValue = pointsToUse * 1000\n//       const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsValue)\n\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           userId: selectedPayment.UserID,\n//           orderId: selectedPayment.OrderID,\n//           usingPoints: pointsToUse > 0 ? 1 : 0,\n//           pointsUsedNumber: pointsToUse,\n//           amount: newAmount,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Close dialog and refresh payments\n//       setDialogOpen(false)\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing user payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   // Format date to a more readable format\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return date.toLocaleString(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     })\n//   }\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) =>\n//       payment.UserName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//       payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Separate paid and unpaid payments\n//   const unpaidPayments = filteredPayments.filter((payment) => payment.TotalPrice === 0)\n//   const paidPayments = filteredPayments.filter((payment) => payment.TotalPrice > 0)\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo tên hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {/* Unpaid Payments Section */}\n//             <div className=\"mb-8\">\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Chưa thanh toán</h3>\n//               {unpaidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng chưa thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Thao tác</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {unpaidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td>\n//                             <button onClick={() => handlePaymentClick(payment)} className=\"serve-button\">\n//                               <CheckCircle className=\"h-4 w-4 mr-1\" />\n//                               Thanh toán\n//                             </button>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Paid Payments Section */}\n//             <div>\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Đã thanh toán</h3>\n//               {paidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng đã thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Tổng tiền</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {paidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td className=\"font-medium text-green-600\">{formatCurrency(payment.TotalPrice)}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </DashboardSection>\n\n//       {/* Points Dialog */}\n//       {dialogOpen && selectedPayment && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Sử dụng điểm tích lũy</h3>\n\n//             <div className=\"mb-4\">\n//               <p className=\"text-sm text-gray-600 mb-1\">Khách hàng: {selectedPayment.UserName}</p>\n//               <p className=\"text-sm text-gray-600 mb-1\">Điểm hiện có: {selectedPayment.Points} điểm</p>\n//               <p className=\"text-sm text-gray-600 mb-3\">\n//                 Giá trị đơn hàng: {formatCurrency(selectedPayment.TotalPrice)}\n//               </p>\n\n//               <div className=\"mt-4\">\n//                 <label htmlFor=\"pointsInput\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                   Nhập số điểm muốn sử dụng:\n//                 </label>\n//                 <input\n//                   id=\"pointsInput\"\n//                   type=\"number\"\n//                   min=\"0\"\n//                   max={Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))}\n//                   value={pointsToUse}\n//                   onChange={(e) => setPointsToUse(Number.parseInt(e.target.value) || 0)}\n//                   className=\"form-input w-full\"\n//                 />\n//                 <p className=\"text-xs text-gray-500 mt-1\">\n//                   1 điểm = 1.000đ (Tối đa:{\" \"}\n//                   {Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))} điểm)\n//                 </p>\n//               </div>\n\n//               <div className=\"mt-4 p-3 bg-gray-50 rounded-md\">\n//                 <p className=\"text-sm font-medium\">Tổng thanh toán sau khi sử dụng điểm:</p>\n//                 <p className=\"text-lg font-bold text-green-600\">\n//                   {formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))}\n//                 </p>\n//               </div>\n//             </div>\n\n//             <div className=\"flex justify-end space-x-3 mt-6\">\n//               <button\n//                 onClick={() => setDialogOpen(false)}\n//                 className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n//               >\n//                 Hủy\n//               </button>\n//               <button\n//                 onClick={handleUserPayment}\n//                 className=\"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n//               >\n//                 Xác nhận thanh toán\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default PaymentSection\n\n\"use client\";\n\nvar _jsxFileName = \"/home/dhpho/Programming/NCKH/admin-web/src/PaymentSection.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\";\nimport \"./Content.css\";\nimport DashboardSection from \"./Dashboard/DashboardSection\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PaymentSection = () => {\n  _s();\n  const [payments, setPayments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPayment, setSelectedPayment] = useState(null);\n  const [pointsToUse, setPointsToUse] = useState(0);\n  const fetchPayments = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/api/payments/all\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch payments\");\n      }\n      const data = await response.json();\n      setPayments(data.payments || []);\n      setError(null);\n    } catch (err) {\n      console.error(\"Error fetching payments:\", err);\n      setError(\"Failed to load payments. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Initial fetch\n    fetchPayments();\n\n    // Set up interval for continuous fetching\n    const intervalId = setInterval(() => {\n      fetchPayments();\n    }, 1000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"vi-VN\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\"\n    }).format(amount);\n  };\n  const handlePaymentClick = payment => {\n    if (payment.UserID !== -1) {\n      // Registered user\n      setSelectedPayment(payment);\n      setPointsToUse(0);\n      setDialogOpen(true);\n    } else {\n      // Guest user\n      handleGuestPayment(payment);\n    }\n  };\n  const handleGuestPayment = async payment => {\n    try {\n      setLoading(true);\n      const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          orderId: payment.OrderID,\n          amount: payment.TotalPrice,\n          paymentMethod: \"cash\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to process payment\");\n      }\n\n      // Refresh payments after successful payment\n      fetchPayments();\n      alert(\"Payment processed successfully!\");\n    } catch (err) {\n      console.error(\"Error processing payment:\", err);\n      alert(\"Failed to process payment. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleUserPayment = async () => {\n    if (!selectedPayment) return;\n    try {\n      setLoading(true);\n\n      // Calculate new amount after points deduction\n      const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000);\n      const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: selectedPayment.UserID,\n          orderId: selectedPayment.OrderID,\n          usingPoints: pointsToUse > 0 ? 1 : 0,\n          pointsUsedNumber: pointsToUse,\n          amount: newAmount,\n          paymentMethod: \"cash\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to process payment\");\n      }\n\n      // Close dialog and refresh payments\n      setDialogOpen(false);\n      fetchPayments();\n      alert(\"Payment processed successfully!\");\n    } catch (err) {\n      console.error(\"Error processing payment:\", err);\n      alert(\"Failed to process payment. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter payments based on search term\n  const filteredPayments = payments.filter(payment => payment.TableID.toString().includes(searchTerm) || payment.UserName.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Separate unpaid and paid payments\n  const unpaidPayments = filteredPayments.filter(payment => payment.TotalPrice === 0);\n  const paidPayments = filteredPayments.filter(payment => payment.TotalPrice > 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [dialogOpen && selectedPayment && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 w-full max-w-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-4\",\n          children: \"Payment Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: [\"Customer: \", selectedPayment.UserName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: [\"Table: \", selectedPayment.TableID]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: [\"Order ID: \", selectedPayment.OrderID]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: [\"Total Amount: \", formatCurrency(selectedPayment.TotalPrice)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-indigo-600\",\n            children: [\"Available Points: \", selectedPayment.Points]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"points\",\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Points to Use (1 point = 1,000 VND)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"points\",\n            min: \"0\",\n            max: Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000)),\n            value: pointsToUse,\n            onChange: e => setPointsToUse(Number.parseInt(e.target.value) || 0),\n            className: \"form-input w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 p-2 bg-gray-50 rounded-md\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm font-medium\",\n              children: [\"New Amount: \", formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-gray-500\",\n              children: [\"Points Discount: \", formatCurrency(pointsToUse * 1000)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end space-x-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDialogOpen(false),\n            className: \"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUserPayment,\n            className: \"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\",\n            children: \"Process Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DashboardSection, {\n      title: \"Payment Management\",\n      icon: /*#__PURE__*/_jsxDEV(CreditCard, {\n        className: \"h-5 w-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 58\n      }, this),\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-alert\",\n        children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n          className: \"h-5 w-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-search-container\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          className: \"order-search-icon h-4 w-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by table or customer name...\",\n          className: \"order-search-input\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), loading && payments.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"h-8 w-8 loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2 text-gray-600\",\n          children: \"Loading payments...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900 mb-4\",\n            children: \"Unpaid Orders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this), unpaidPayments.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No unpaid orders found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overflow-x-auto w-full\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"orders-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Order ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 728,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Table\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 729,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 730,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Customer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 731,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Points\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 732,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 733,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: unpaidPayments.map(payment => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.OrderID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 739,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.TableID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 740,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: formatDate(payment.OrderDate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 741,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.UserID !== -1 ? payment.UserName : \"Guest\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 742,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.UserID !== -1 ? payment.Points : \"N/A\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 743,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handlePaymentClick(payment),\n                      className: \"px-3 py-1 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\",\n                      children: \"Payment\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 745,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 744,\n                    columnNumber: 27\n                  }, this)]\n                }, payment.PaymentID, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 738,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900 mb-4\",\n            children: \"Paid Orders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 15\n          }, this), paidPayments.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-state\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No paid orders found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overflow-x-auto w-full\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"orders-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Order ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 773,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Table\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 774,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 775,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Customer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 776,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Amount\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 777,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 778,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 772,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: paidPayments.map(payment => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.OrderID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 784,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.TableID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 785,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: formatDate(payment.OrderDate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: payment.UserID !== -1 ? payment.UserName : \"Guest\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 787,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: formatCurrency(payment.TotalPrice)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\",\n                      children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n                        className: \"h-3 w-3 mr-1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 791,\n                        columnNumber: 31\n                      }, this), \"Paid\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 790,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 789,\n                    columnNumber: 27\n                  }, this)]\n                }, payment.PaymentID, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 783,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 634,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentSection, \"04550SlzQ7juDmDtTDzuDx9EWto=\");\n_c = PaymentSection;\nexport default PaymentSection;\nvar _c;\n$RefreshReg$(_c, \"PaymentSection\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useState","Loader2","AlertCircle","CreditCard","Search","CheckCircle","DashboardSection","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentSection","payments","setPayments","loading","setLoading","error","setError","searchTerm","setSearchTerm","dialogOpen","setDialogOpen","selectedPayment","setSelectedPayment","pointsToUse","setPointsToUse","fetchPayments","response","fetch","ok","Error","data","json","err","console","intervalId","setInterval","clearInterval","formatDate","dateString","date","Date","toLocaleString","day","month","year","hour","minute","formatCurrency","amount","Intl","NumberFormat","style","currency","format","handlePaymentClick","payment","UserID","handleGuestPayment","method","headers","body","JSON","stringify","orderId","OrderID","TotalPrice","paymentMethod","alert","handleUserPayment","newAmount","Math","max","userId","usingPoints","pointsUsedNumber","filteredPayments","filter","TableID","toString","includes","UserName","toLowerCase","unpaidPayments","paidPayments","className","children","fileName","lineNumber","columnNumber","Points","htmlFor","type","id","min","floor","value","onChange","e","Number","parseInt","target","onClick","title","icon","placeholder","length","map","OrderDate","PaymentID","_c","$RefreshReg$"],"sources":["/home/dhpho/Programming/NCKH/admin-web/src/PaymentSection.js"],"sourcesContent":["// // \"use client\"\n\n// // import { useState, useEffect } from \"react\"\n// // import { CreditCard, Search, Loader2, AlertCircle } from \"lucide-react\"\n// // import \"./Content.css\"\n// // import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// // const PaymentSection = () => {\n// //   const [payments, setPayments] = useState([])\n// //   const [loading, setLoading] = useState(true)\n// //   const [error, setError] = useState(null)\n// //   const [searchTerm, setSearchTerm] = useState(\"\")\n\n// //   const loadPayments = async () => {\n// //     try {\n// //       setLoading(true)\n// //       const response = await fetch(\"http://localhost:8080/api/payments\", {\n// //         method: \"GET\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //       })\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to fetch payments\")\n// //       }\n\n// //       const data = await response.json()\n// //       setPayments(data)\n// //       setError(null)\n// //     } catch (err) {\n// //       console.error(\"Error loading payments:\", err)\n// //       setError(\"Failed to load payments. Please try again later.\")\n// //     } finally {\n// //       setLoading(false)\n// //     }\n// //   }\n\n// //   useEffect(() => {\n// //     loadPayments()\n// //   }, [])\n\n// //   // Filter payments based on search term\n// //   const filteredPayments = payments.filter(\n// //     (payment) => payment.OrderID?.toString().includes(searchTerm) || payment.TableID?.toString().includes(searchTerm),\n// //   )\n\n// //   // Format currency\n// //   const formatCurrency = (amount) => {\n// //     return new Intl.NumberFormat(\"vi-VN\", {\n// //       style: \"currency\",\n// //       currency: \"VND\",\n// //     }).format(amount)\n// //   }\n\n// //   // Format date\n// //   const formatDate = (dateString) => {\n// //     const date = new Date(dateString)\n// //     return new Intl.DateTimeFormat(\"vi-VN\", {\n// //       year: \"numeric\",\n// //       month: \"2-digit\",\n// //       day: \"2-digit\",\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //     }).format(date)\n// //   }\n\n// //   return (\n// //     <div className=\"space-y-6\">\n// //       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n// //         {error && (\n// //           <div className=\"error-alert\">\n// //             <AlertCircle className=\"h-5 w-5\" />\n// //             {error}\n// //           </div>\n// //         )}\n\n// //         <div className=\"order-search-container\">\n// //           <Search className=\"order-search-icon h-4 w-4\" />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Tìm kiếm theo mã đơn hàng hoặc bàn...\"\n// //             className=\"order-search-input\"\n// //             value={searchTerm}\n// //             onChange={(e) => setSearchTerm(e.target.value)}\n// //           />\n// //           <button onClick={loadPayments} className=\"refresh-button\">\n// //             Làm mới\n// //           </button>\n// //         </div>\n\n// //         {loading ? (\n// //           <div className=\"loading-container\">\n// //             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n// //             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n// //           </div>\n// //         ) : (\n// //           <>\n// //             {filteredPayments.length === 0 ? (\n// //               <div className=\"empty-state\">\n// //                 <p>Không tìm thấy dữ liệu thanh toán.</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"overflow-x-auto w-full\">\n// //                 <table className=\"orders-table\">\n// //                   <thead>\n// //                     <tr>\n// //                       <th>Mã thanh toán</th>\n// //                       <th>Mã đơn hàng</th>\n// //                       <th>Bàn</th>\n// //                       <th>Tổng tiền</th>\n// //                       <th>Ngày thanh toán</th>\n// //                       <th>Trạng thái</th>\n// //                     </tr>\n// //                   </thead>\n// //                   <tbody>\n// //                     {filteredPayments.map((payment) => (\n// //                       <tr key={payment.PaymentID}>\n// //                         <td>{payment.PaymentID}</td>\n// //                         <td>{payment.OrderID}</td>\n// //                         <td>{payment.TableID}</td>\n// //                         <td className=\"font-medium\">{formatCurrency(payment.Amount)}</td>\n// //                         <td>{formatDate(payment.PaymentDate)}</td>\n// //                         <td>\n// //                           <span\n// //                             className={`order-status ${\n// //                               payment.Status === \"Completed\"\n// //                                 ? \"status-completed\"\n// //                                 : payment.Status === \"Pending\"\n// //                                   ? \"status-pending\"\n// //                                   : \"status-progress\"\n// //                             }`}\n// //                           >\n// //                             {payment.Status === \"Completed\"\n// //                               ? \"Hoàn thành\"\n// //                               : payment.Status === \"Pending\"\n// //                                 ? \"Chờ xử lý\"\n// //                                 : \"Đang xử lý\"}\n// //                           </span>\n// //                         </td>\n// //                       </tr>\n// //                     ))}\n// //                   </tbody>\n// //                 </table>\n// //               </div>\n// //             )}\n// //           </>\n// //         )}\n// //       </DashboardSection>\n// //     </div>\n// //   )\n// // }\n\n// // export default PaymentSection\n\n\n// \"use client\"\n\n// import { useEffect, useState } from \"react\"\n// import { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\"\n// import \"./Content.css\"\n// import DashboardSection from \"./Dashboard/DashboardSection\"\n\n// const PaymentSection = () => {\n//   const [payments, setPayments] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [error, setError] = useState(null)\n//   const [searchTerm, setSearchTerm] = useState(\"\")\n//   const [dialogOpen, setDialogOpen] = useState(false)\n//   const [selectedPayment, setSelectedPayment] = useState(null)\n//   const [pointsToUse, setPointsToUse] = useState(0)\n\n//   const fetchPayments = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/all\")\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch payments\")\n//       }\n//       const data = await response.json()\n//       setPayments(data.payments || [])\n//       setError(null)\n//     } catch (err) {\n//       console.error(\"Error fetching payments:\", err)\n//       setError(\"Failed to load payments. Please try again later.\")\n//     } finally {\n//       setLoading(false)\n//     }\n//   }\n\n//   useEffect(() => {\n//     fetchPayments()\n\n//     // Set up interval to fetch data every second\n//     const intervalId = setInterval(() => {\n//       fetchPayments()\n//     }, 1000)\n\n//     // Clean up interval on component unmount\n//     return () => clearInterval(intervalId)\n//   }, [])\n\n//   const handlePaymentClick = (payment) => {\n//     if (payment.UserID !== -1) {\n//       // Open dialog for registered user\n//       setSelectedPayment(payment)\n//       setPointsToUse(0)\n//       setDialogOpen(true)\n//     } else {\n//       // Handle guest payment directly\n//       handleGuestPayment(payment)\n//     }\n//   }\n\n//   const handleGuestPayment = async (payment) => {\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           orderId: payment.OrderID,\n//           amount: payment.TotalPrice,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Refresh payments after successful payment\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing guest payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   const handleUserPayment = async () => {\n//     if (!selectedPayment) return\n\n//     try {\n//       // Calculate new amount after points deduction\n//       const pointsValue = pointsToUse * 1000\n//       const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsValue)\n\n//       const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           userId: selectedPayment.UserID,\n//           orderId: selectedPayment.OrderID,\n//           usingPoints: pointsToUse > 0 ? 1 : 0,\n//           pointsUsedNumber: pointsToUse,\n//           amount: newAmount,\n//           paymentMethod: \"cash\",\n//         }),\n//       })\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to process payment\")\n//       }\n\n//       // Close dialog and refresh payments\n//       setDialogOpen(false)\n//       fetchPayments()\n//     } catch (err) {\n//       console.error(\"Error processing user payment:\", err)\n//       setError(\"Failed to process payment. Please try again.\")\n//     }\n//   }\n\n//   // Format date to a more readable format\n//   const formatDate = (dateString) => {\n//     const date = new Date(dateString)\n//     return date.toLocaleString(\"vi-VN\", {\n//       year: \"numeric\",\n//       month: \"2-digit\",\n//       day: \"2-digit\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     })\n//   }\n\n//   // Format currency\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat(\"vi-VN\", {\n//       style: \"currency\",\n//       currency: \"VND\",\n//     }).format(amount)\n//   }\n\n//   // Filter payments based on search term\n//   const filteredPayments = payments.filter(\n//     (payment) =>\n//       payment.UserName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//       payment.TableID?.toString().includes(searchTerm),\n//   )\n\n//   // Separate paid and unpaid payments\n//   const unpaidPayments = filteredPayments.filter((payment) => payment.TotalPrice === 0)\n//   const paidPayments = filteredPayments.filter((payment) => payment.TotalPrice > 0)\n\n//   return (\n//     <div className=\"space-y-6\">\n//       <DashboardSection title=\"Quản lý thanh toán\" icon={<CreditCard className=\"h-5 w-5\" />}>\n//         {error && (\n//           <div className=\"error-alert\">\n//             <AlertCircle className=\"h-5 w-5\" />\n//             {error}\n//           </div>\n//         )}\n\n//         <div className=\"order-search-container\">\n//           <Search className=\"order-search-icon h-4 w-4\" />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Tìm kiếm theo tên hoặc bàn...\"\n//             className=\"order-search-input\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//         </div>\n\n//         {loading ? (\n//           <div className=\"loading-container\">\n//             <Loader2 className=\"h-8 w-8 loading-spinner\" />\n//             <span className=\"ml-2 text-gray-600\">Đang tải dữ liệu thanh toán...</span>\n//           </div>\n//         ) : (\n//           <>\n//             {/* Unpaid Payments Section */}\n//             <div className=\"mb-8\">\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Chưa thanh toán</h3>\n//               {unpaidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng chưa thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Thao tác</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {unpaidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td>\n//                             <button onClick={() => handlePaymentClick(payment)} className=\"serve-button\">\n//                               <CheckCircle className=\"h-4 w-4 mr-1\" />\n//                               Thanh toán\n//                             </button>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Paid Payments Section */}\n//             <div>\n//               <h3 className=\"text-lg font-semibold mb-4 text-gray-800 border-b pb-2\">Đã thanh toán</h3>\n//               {paidPayments.length === 0 ? (\n//                 <div className=\"empty-state\">\n//                   <p>Không có đơn hàng đã thanh toán.</p>\n//                 </div>\n//               ) : (\n//                 <div className=\"overflow-x-auto w-full\">\n//                   <table className=\"orders-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Mã đơn</th>\n//                         <th>Bàn</th>\n//                         <th>Ngày đặt</th>\n//                         <th>Khách hàng</th>\n//                         <th>Tổng tiền</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {paidPayments.map((payment) => (\n//                         <tr key={payment.PaymentID}>\n//                           <td>{payment.OrderID}</td>\n//                           <td>{payment.TableID}</td>\n//                           <td>{formatDate(payment.OrderDate)}</td>\n//                           <td className=\"font-medium\">{payment.UserID !== -1 ? payment.UserName : \"Khách vãng lai\"}</td>\n//                           <td className=\"font-medium text-green-600\">{formatCurrency(payment.TotalPrice)}</td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </DashboardSection>\n\n//       {/* Points Dialog */}\n//       {dialogOpen && selectedPayment && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Sử dụng điểm tích lũy</h3>\n\n//             <div className=\"mb-4\">\n//               <p className=\"text-sm text-gray-600 mb-1\">Khách hàng: {selectedPayment.UserName}</p>\n//               <p className=\"text-sm text-gray-600 mb-1\">Điểm hiện có: {selectedPayment.Points} điểm</p>\n//               <p className=\"text-sm text-gray-600 mb-3\">\n//                 Giá trị đơn hàng: {formatCurrency(selectedPayment.TotalPrice)}\n//               </p>\n\n//               <div className=\"mt-4\">\n//                 <label htmlFor=\"pointsInput\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                   Nhập số điểm muốn sử dụng:\n//                 </label>\n//                 <input\n//                   id=\"pointsInput\"\n//                   type=\"number\"\n//                   min=\"0\"\n//                   max={Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))}\n//                   value={pointsToUse}\n//                   onChange={(e) => setPointsToUse(Number.parseInt(e.target.value) || 0)}\n//                   className=\"form-input w-full\"\n//                 />\n//                 <p className=\"text-xs text-gray-500 mt-1\">\n//                   1 điểm = 1.000đ (Tối đa:{\" \"}\n//                   {Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))} điểm)\n//                 </p>\n//               </div>\n\n//               <div className=\"mt-4 p-3 bg-gray-50 rounded-md\">\n//                 <p className=\"text-sm font-medium\">Tổng thanh toán sau khi sử dụng điểm:</p>\n//                 <p className=\"text-lg font-bold text-green-600\">\n//                   {formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))}\n//                 </p>\n//               </div>\n//             </div>\n\n//             <div className=\"flex justify-end space-x-3 mt-6\">\n//               <button\n//                 onClick={() => setDialogOpen(false)}\n//                 className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n//               >\n//                 Hủy\n//               </button>\n//               <button\n//                 onClick={handleUserPayment}\n//                 className=\"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n//               >\n//                 Xác nhận thanh toán\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n// export default PaymentSection\n\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { Loader2, AlertCircle, CreditCard, Search, CheckCircle } from \"lucide-react\"\nimport \"./Content.css\"\nimport DashboardSection from \"./Dashboard/DashboardSection\"\n\nconst PaymentSection = () => {\n  const [payments, setPayments] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [selectedPayment, setSelectedPayment] = useState(null)\n  const [pointsToUse, setPointsToUse] = useState(0)\n\n  const fetchPayments = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/api/payments/all\")\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch payments\")\n      }\n      const data = await response.json()\n      setPayments(data.payments || [])\n      setError(null)\n    } catch (err) {\n      console.error(\"Error fetching payments:\", err)\n      setError(\"Failed to load payments. Please try again later.\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    // Initial fetch\n    fetchPayments()\n\n    // Set up interval for continuous fetching\n    const intervalId = setInterval(() => {\n      fetchPayments()\n    }, 1000)\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId)\n  }, [])\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleString(\"vi-VN\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n  }\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(amount)\n  }\n\n  const handlePaymentClick = (payment) => {\n    if (payment.UserID !== -1) {\n      // Registered user\n      setSelectedPayment(payment)\n      setPointsToUse(0)\n      setDialogOpen(true)\n    } else {\n      // Guest user\n      handleGuestPayment(payment)\n    }\n  }\n\n  const handleGuestPayment = async (payment) => {\n    try {\n      setLoading(true)\n      const response = await fetch(\"http://localhost:8080/api/payments/handleGuess\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          orderId: payment.OrderID,\n          amount: payment.TotalPrice,\n          paymentMethod: \"cash\",\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Failed to process payment\")\n      }\n\n      // Refresh payments after successful payment\n      fetchPayments()\n      alert(\"Payment processed successfully!\")\n    } catch (err) {\n      console.error(\"Error processing payment:\", err)\n      alert(\"Failed to process payment. Please try again.\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleUserPayment = async () => {\n    if (!selectedPayment) return\n\n    try {\n      setLoading(true)\n\n      // Calculate new amount after points deduction\n      const newAmount = Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000)\n\n      const response = await fetch(\"http://localhost:8080/api/payments/handleUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId: selectedPayment.UserID,\n          orderId: selectedPayment.OrderID,\n          usingPoints: pointsToUse > 0 ? 1 : 0,\n          pointsUsedNumber: pointsToUse,\n          amount: newAmount,\n          paymentMethod: \"cash\",\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Failed to process payment\")\n      }\n\n      // Close dialog and refresh payments\n      setDialogOpen(false)\n      fetchPayments()\n      alert(\"Payment processed successfully!\")\n    } catch (err) {\n      console.error(\"Error processing payment:\", err)\n      alert(\"Failed to process payment. Please try again.\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Filter payments based on search term\n  const filteredPayments = payments.filter(\n    (payment) =>\n      payment.TableID.toString().includes(searchTerm) ||\n      payment.UserName.toLowerCase().includes(searchTerm.toLowerCase()),\n  )\n\n  // Separate unpaid and paid payments\n  const unpaidPayments = filteredPayments.filter((payment) => payment.TotalPrice === 0)\n  const paidPayments = filteredPayments.filter((payment) => payment.TotalPrice > 0)\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Payment Dialog */}\n      {dialogOpen && selectedPayment && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">Payment Details</h3>\n\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-600\">Customer: {selectedPayment.UserName}</p>\n              <p className=\"text-sm text-gray-600\">Table: {selectedPayment.TableID}</p>\n              <p className=\"text-sm text-gray-600\">Order ID: {selectedPayment.OrderID}</p>\n              <p className=\"text-sm text-gray-600\">Total Amount: {formatCurrency(selectedPayment.TotalPrice)}</p>\n              <p className=\"text-sm font-medium text-indigo-600\">Available Points: {selectedPayment.Points}</p>\n            </div>\n\n            <div className=\"mb-6\">\n              <label htmlFor=\"points\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Points to Use (1 point = 1,000 VND)\n              </label>\n              <input\n                type=\"number\"\n                id=\"points\"\n                min=\"0\"\n                max={Math.min(selectedPayment.Points, Math.floor(selectedPayment.TotalPrice / 1000))}\n                value={pointsToUse}\n                onChange={(e) => setPointsToUse(Number.parseInt(e.target.value) || 0)}\n                className=\"form-input w-full\"\n              />\n\n              <div className=\"mt-2 p-2 bg-gray-50 rounded-md\">\n                <p className=\"text-sm font-medium\">\n                  New Amount: {formatCurrency(Math.max(0, selectedPayment.TotalPrice - pointsToUse * 1000))}\n                </p>\n                <p className=\"text-xs text-gray-500\">Points Discount: {formatCurrency(pointsToUse * 1000)}</p>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <button\n                onClick={() => setDialogOpen(false)}\n                className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleUserPayment}\n                className=\"px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n              >\n                Process Payment\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <DashboardSection title=\"Payment Management\" icon={<CreditCard className=\"h-5 w-5\" />}>\n        {error && (\n          <div className=\"error-alert\">\n            <AlertCircle className=\"h-5 w-5\" />\n            {error}\n          </div>\n        )}\n\n        <div className=\"order-search-container\">\n          <Search className=\"order-search-icon h-4 w-4\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search by table or customer name...\"\n            className=\"order-search-input\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n\n        {loading && payments.length === 0 ? (\n          <div className=\"loading-container\">\n            <Loader2 className=\"h-8 w-8 loading-spinner\" />\n            <span className=\"ml-2 text-gray-600\">Loading payments...</span>\n          </div>\n        ) : (\n          <>\n            {/* Unpaid Payments Section */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Unpaid Orders</h3>\n\n              {unpaidPayments.length === 0 ? (\n                <div className=\"empty-state\">\n                  <p>No unpaid orders found.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto w-full\">\n                  <table className=\"orders-table\">\n                    <thead>\n                      <tr>\n                        <th>Order ID</th>\n                        <th>Table</th>\n                        <th>Date</th>\n                        <th>Customer</th>\n                        <th>Points</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {unpaidPayments.map((payment) => (\n                        <tr key={payment.PaymentID}>\n                          <td>{payment.OrderID}</td>\n                          <td>{payment.TableID}</td>\n                          <td>{formatDate(payment.OrderDate)}</td>\n                          <td>{payment.UserID !== -1 ? payment.UserName : \"Guest\"}</td>\n                          <td>{payment.UserID !== -1 ? payment.Points : \"N/A\"}</td>\n                          <td>\n                            <button\n                              onClick={() => handlePaymentClick(payment)}\n                              className=\"px-3 py-1 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700\"\n                            >\n                              Payment\n                            </button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </div>\n\n            {/* Paid Payments Section */}\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Paid Orders</h3>\n\n              {paidPayments.length === 0 ? (\n                <div className=\"empty-state\">\n                  <p>No paid orders found.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto w-full\">\n                  <table className=\"orders-table\">\n                    <thead>\n                      <tr>\n                        <th>Order ID</th>\n                        <th>Table</th>\n                        <th>Date</th>\n                        <th>Customer</th>\n                        <th>Amount</th>\n                        <th>Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {paidPayments.map((payment) => (\n                        <tr key={payment.PaymentID}>\n                          <td>{payment.OrderID}</td>\n                          <td>{payment.TableID}</td>\n                          <td>{formatDate(payment.OrderDate)}</td>\n                          <td>{payment.UserID !== -1 ? payment.UserName : \"Guest\"}</td>\n                          <td>{formatCurrency(payment.TotalPrice)}</td>\n                          <td>\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Paid\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </DashboardSection>\n    </div>\n  )\n}\n\nexport default PaymentSection\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}